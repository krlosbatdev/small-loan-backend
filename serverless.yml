# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: small-loan
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

plugins:
  # - serverless-bundle # Package our functions with Webpack
  - serverless-plugin-typescript
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # Set the table name here so we can use it while testing locally
  tableName: ${self:custom.stage}-textract
  tag: 'Small-Loan'
  bucket: 'texttract5'
# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs12.x
  region: us-west-2
  stage: dev
  memorySize: 128
    # 'iamRoleStatements' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - 's3:*'
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - 'sns:*'
        - 'sqs:*'
        - 'textract:*'
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        '*'
        # - 'Fn::GetAtt': [PumpItTable, Arn]

functions:
  textractS3:
    handler: src/s3-textract.main
    tags:
      App: ${self:custom.tag}

  parseJsonS3:
    handler: src/s3-jsonparse.main
    # events:
    #   - s3:
    #       bucket: ${self:custom.bucket}
    #       event: s3:ObjectCreated:*
    #       rules:
    #         - suffix: .pdf
    tags:
      App: ${self:custom.tag}

resources:
  - ${file(resources/s3-bucket.yml)}
